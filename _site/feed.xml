<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="zh" /><updated>2021-04-17T20:13:27+08:00</updated><id>/feed.xml</id><title type="html">CY’s blog</title><subtitle>輝く星になる
</subtitle><author><name>CY</name></author><entry><title type="html">THU OS Lab1</title><link href="/2021/04/16/OSLab1.html" rel="alternate" type="text/html" title="THU OS Lab1" /><published>2021-04-16T00:00:00+08:00</published><updated>2021-04-16T00:00:00+08:00</updated><id>/2021/04/16/OSLab1</id><content type="html" xml:base="/2021/04/16/OSLab1.html">&lt;h2 id=&quot;练习1&quot;&gt;练习1&lt;/h2&gt;
&lt;h3 id=&quot;1-操作系统镜像文件ucoreimg是如何一步一步生成的&quot;&gt;1. 操作系统镜像文件ucore.img是如何一步一步生成的&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;先生成kernel和bootblock，然后生成ucore.img（需要研究下MakeFile的写法，兴趣不大）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-一个被系统认为是符合规范的硬盘主引导扇区的特点&quot;&gt;2. 一个被系统认为是符合规范的硬盘主引导扇区的特点&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;只有512个字节&lt;/li&gt;
  &lt;li&gt;最后两字节是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x55AA&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;由不超过466字节的启动代码和不超过64字节的硬盘分区表加上结束符构成&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;练习2&quot;&gt;练习2&lt;/h2&gt;
&lt;p&gt;先记录一下在eclipse中用gdb和qemu调试的方法：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;配置External Tools Configurations，其中的arguments可以指定make的参数，然后参考MakeFile确定&lt;/li&gt;
  &lt;li&gt;配置Debug Configurations，其中的Commands栏可以指定gdb的指令序列&lt;/li&gt;
  &lt;li&gt;先启动qemu，让其进入等待状态（通过MakeFile），然后启动gdb，让其跟qemu建立连接，比如使用如下的参数：
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set architecture i8086
target remote :1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果不用eclipse，可以直接写一个文件保存gdb的运行指令，然后在MakeFile中加一个选项指向这个文件（具体参考其他已有的选项）&lt;/p&gt;

&lt;h3 id=&quot;1-从cpu加电后执行的第一条指令开始单步跟踪bios的执行&quot;&gt;1. 从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;使用上述的两条指令启动gdb就可以达到效果，根据讲课的视频知道第一条指令在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xffff0&lt;/code&gt;处，可以使用如下指令
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x /2i 0xffff0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;查看相应的bios代码&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-在初始化位置0x7c00设置实地址断点测试断点正常&quot;&gt;2. 在初始化位置0x7c00设置实地址断点，测试断点正常&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b 0x7c00&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-从0x7c00开始跟踪代码运行将单步跟踪反汇编得到的代码与bootasms和bootblockasm进行比较&quot;&gt;3. 从0x7c00开始跟踪代码运行，将单步跟踪反汇编得到的代码与bootasm.S和bootblock.asm进行比较&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;在eclipse调试器中可以看到相应的汇编代码&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-自己找一个bootloader或内核中的代码位置设置断点并进行调试&quot;&gt;4. 自己找一个bootloader或内核中的代码位置，设置断点并进行调试&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;自由发挥&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;练习-3&quot;&gt;练习 3&lt;/h2&gt;
&lt;h3 id=&quot;分析bootloader进入保护模式的过程&quot;&gt;分析bootloader进入保护模式的过程&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;查看bootasm.S源码可知，首先要使能A20总线，然后初始化GDT表（在bootasm.S中），最后把cr0寄存器置1从而使能保护模式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;练习4&quot;&gt;练习4&lt;/h2&gt;
&lt;h3 id=&quot;1-bootloader如何读取硬盘扇区&quot;&gt;1. bootloader如何读取硬盘扇区&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;readsect函数
    &lt;h3 id=&quot;2-bootloader如何加载elf格式的os&quot;&gt;2. bootloader如何加载ELF格式的OS&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;bootmain函数，遍历所有的program header段依次读取，然后调用entry point&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;练习5&quot;&gt;练习5&lt;/h2&gt;
&lt;h3 id=&quot;完成print_stackframe的实现&quot;&gt;完成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print_stackframe&lt;/code&gt;的实现&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;先看实验指导书了解调用栈的结构，然后根据注释可以很轻松的写出实现。这里主要是对C语言不熟所以不会将32位整数转成地址去读数据，参考了答案写出来的
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void print_stackframe(void) {
  uint32_t ebp = read_ebp();
  uint32_t eip = read_eip();
  uint32_t i;
  for (i = 0; i &amp;lt; STACKFRAME_DEPTH; ++i) {
      cprintf(&quot;ebp:0x%08x eip:0x%08x &quot;, ebp, eip);
      uint32_t* args = (uint32_t*)(ebp + 8); // 通过强转成指针来把整数当作地址
      cprintf(&quot;args:0x%08x 0x%08x 0x%08x 0x%08x&quot;, args[0], args[1], args[2], args[3]); // 直接通过索引实现对地址的顺序访问
      cprintf(&quot;\n&quot;);
      print_debuginfo(eip-1);
      eip = ((uint32_t*)(ebp + 4))[0]; // 同理，转成指针并用索引来读地址中的值。记住返回地址存放在ebp的上面4位的地址中
      ebp = ((uint32_t*)ebp)[0]; // 上一个ebp存放在ebp对应的地址中
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;练习6&quot;&gt;练习6&lt;/h2&gt;
&lt;h3 id=&quot;1-中断描述符表中一个表项占多少字节哪几位代表中断处理代码的入口&quot;&gt;1. 中断描述符表中一个表项占多少字节？哪几位代表中断处理代码的入口？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;8字节。可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmu.h&lt;/code&gt;中看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatedesc&lt;/code&gt;的定义，其中第0~15位是偏移量的低16位，第16~31位是段选择子，第48~63位是偏移量的高16位。通过段选择子从全局描述符表找到相应的段基址，然后通过偏移量找到中断例程的入口&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-完成idt_init函数&quot;&gt;2. 完成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;idt_init&lt;/code&gt;函数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;有些存疑的地方，主要是对第三个参数GD_KTEXT不太理解，目前先理解为因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vectors&lt;/code&gt;中的中断服务例程都放在了内核的代码段，所以所有的段选择子都填这个
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void idt_init(void) {
  extern uintptr_t __vectors[];
  int i;
  for (int i = 0; i &amp;lt; 256; ++i) {
      SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL); // idt项，是否为系统调用，段选择子，偏移量，特权级别
  }
  SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER); // 从用户切到内核是用户特权级
  lidt(&amp;amp;idt_pd);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-完成trap函数&quot;&gt;3. 完成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trap&lt;/code&gt;函数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;只完成了时钟中断
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;case IRQ_OFFSET + IRQ_TIMER:
  ticks++;
  if (ticks % TICK_NUM == 0) {
      print_ticks();
  }
  break;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>CY</name></author><category term="OSLab" /><summary type="html">练习1 1. 操作系统镜像文件ucore.img是如何一步一步生成的 先生成kernel和bootblock，然后生成ucore.img（需要研究下MakeFile的写法，兴趣不大） 2. 一个被系统认为是符合规范的硬盘主引导扇区的特点 只有512个字节 最后两字节是0x55AA 由不超过466字节的启动代码和不超过64字节的硬盘分区表加上结束符构成 练习2 先记录一下在eclipse中用gdb和qemu调试的方法： 配置External Tools Configurations，其中的arguments可以指定make的参数，然后参考MakeFile确定 配置Debug Configurations，其中的Commands栏可以指定gdb的指令序列 先启动qemu，让其进入等待状态（通过MakeFile），然后启动gdb，让其跟qemu建立连接，比如使用如下的参数： set architecture i8086 target remote :1234 如果不用eclipse，可以直接写一个文件保存gdb的运行指令，然后在MakeFile中加一个选项指向这个文件（具体参考其他已有的选项） 1. 从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行 使用上述的两条指令启动gdb就可以达到效果，根据讲课的视频知道第一条指令在0xffff0处，可以使用如下指令 x /2i 0xffff0 查看相应的bios代码 2. 在初始化位置0x7c00设置实地址断点，测试断点正常 加上b 0x7c00即可 3. 从0x7c00开始跟踪代码运行，将单步跟踪反汇编得到的代码与bootasm.S和bootblock.asm进行比较 在eclipse调试器中可以看到相应的汇编代码 4. 自己找一个bootloader或内核中的代码位置，设置断点并进行调试 自由发挥 练习 3 分析bootloader进入保护模式的过程 查看bootasm.S源码可知，首先要使能A20总线，然后初始化GDT表（在bootasm.S中），最后把cr0寄存器置1从而使能保护模式 练习4 1. bootloader如何读取硬盘扇区 readsect函数 2. bootloader如何加载ELF格式的OS bootmain函数，遍历所有的program header段依次读取，然后调用entry point 练习5 完成print_stackframe的实现 先看实验指导书了解调用栈的结构，然后根据注释可以很轻松的写出实现。这里主要是对C语言不熟所以不会将32位整数转成地址去读数据，参考了答案写出来的 void print_stackframe(void) { uint32_t ebp = read_ebp(); uint32_t eip = read_eip(); uint32_t i; for (i = 0; i &amp;lt; STACKFRAME_DEPTH; ++i) { cprintf(&quot;ebp:0x%08x eip:0x%08x &quot;, ebp, eip); uint32_t* args = (uint32_t*)(ebp + 8); // 通过强转成指针来把整数当作地址 cprintf(&quot;args:0x%08x 0x%08x 0x%08x 0x%08x&quot;, args[0], args[1], args[2], args[3]); // 直接通过索引实现对地址的顺序访问 cprintf(&quot;\n&quot;); print_debuginfo(eip-1); eip = ((uint32_t*)(ebp + 4))[0]; // 同理，转成指针并用索引来读地址中的值。记住返回地址存放在ebp的上面4位的地址中 ebp = ((uint32_t*)ebp)[0]; // 上一个ebp存放在ebp对应的地址中 } } 练习6 1. 中断描述符表中一个表项占多少字节？哪几位代表中断处理代码的入口？ 8字节。可以在mmu.h中看到gatedesc的定义，其中第0~15位是偏移量的低16位，第16~31位是段选择子，第48~63位是偏移量的高16位。通过段选择子从全局描述符表找到相应的段基址，然后通过偏移量找到中断例程的入口 2. 完成idt_init函数 有些存疑的地方，主要是对第三个参数GD_KTEXT不太理解，目前先理解为因为vectors中的中断服务例程都放在了内核的代码段，所以所有的段选择子都填这个 void idt_init(void) { extern uintptr_t __vectors[]; int i; for (int i = 0; i &amp;lt; 256; ++i) { SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL); // idt项，是否为系统调用，段选择子，偏移量，特权级别 } SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER); // 从用户切到内核是用户特权级 lidt(&amp;amp;idt_pd); } 3. 完成trap函数 只完成了时钟中断 case IRQ_OFFSET + IRQ_TIMER: ticks++; if (ticks % TICK_NUM == 0) { print_ticks(); } break;</summary></entry><entry><title type="html">Hello World!</title><link href="/2021/04/15/Hello-World.html" rel="alternate" type="text/html" title="Hello World!" /><published>2021-04-15T00:00:00+08:00</published><updated>2021-04-15T00:00:00+08:00</updated><id>/2021/04/15/Hello-World</id><content type="html" xml:base="/2021/04/15/Hello-World.html">&lt;!--more--&gt;
&lt;p&gt;经过大概一个下午，我的github博客终于搭好了:tada:之前看&lt;a href=&quot;https://bot-man-jl.github.io&quot;&gt;睿哥的博客&lt;/a&gt;的时候就觉得github.io的博客看起来比CSDN有逼格多了，身为颜值控的我怎么能不试一试呢？于是今天下午摸了个鱼，找了篇&lt;a href=&quot;https://keysaim.github.io/post/blog/2017-08-15-how-to-setup-your-github-io-blog/&quot;&gt;教程&lt;/a&gt;搭了一下&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;总结一下大概的流程吧&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先需要在自己的github目录新建一个仓库，这个仓库名是username.github.io(username是你的github用户名)&lt;/li&gt;
  &lt;li&gt;向这个目录中增加静态文件，然后访问 https://username.github.io 就会看到渲染出来的效果。github默认使用Jekyll框架进行网站的构建&lt;/li&gt;
  &lt;li&gt;当然，完全自己写网页是不可能的，毕竟不是所有人都懂前端，所以下一步就是挑选一款喜欢的主题:ghost:我随便搜了一些选中了现在这个TeXt&lt;/li&gt;
  &lt;li&gt;安装的教程可以参照&lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/quick-start&quot;&gt;TeXt的官网&lt;/a&gt;进行，其实就是把大佬的网站拷贝一份到自己的repo，然后自己只需要更改一些配置，填充内容即可&lt;/li&gt;
  &lt;li&gt;如果要本地调试的话，需要额外安装一些工具，中间遇到有一个问题是下面的代码执行报错&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;报错信息大概是&lt;/p&gt;

&lt;p class=&quot;error&quot;&gt;cannot load such file – webrick (LoadError)&lt;/p&gt;
&lt;p&gt;于是我在Jekyll的github仓库issues中搜索了一下，终于找到了&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/8531&quot;&gt;解决方法&lt;/a&gt;，输入如下命令即可：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle add webrick
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后再执行之前的命令就可以在localhost:4000预览本地的网站效果了&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;一些有用的链接&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/test/&quot;&gt;TeXt Home&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md&quot;&gt;Emoji cheat list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CY</name></author><category term="HelloWorld!" /><summary type="html"></summary></entry></feed>